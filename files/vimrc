" Use the Solarized Dark theme
" set background=dark
" colorscheme solarized
" Highlight the 101st character red
highlight OverLength ctermbg=darkred ctermfg=white guibg=#592929
match OverLength /\%101v/
" Or make the last column blue.
" set colorcolumn=101
" hi ColorColumn ctermbg=darkblue guibg=darkblue
set textwidth=100
" Make Vim more useful
set nocompatible
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Enhance command-line completion
set wildmenu
set wildmode=list:longest,full
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Change mapleader
let mapleader=","
" Don’t add empty newlines at the end of files
set binary
set noeol
" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
  set undodir=~/.vim/undo
endif

" get rid of highlights
map - :nohls<cr>

" Not sure what this does
" nnoremap JJJJ <Nop>
" Set off the other paren
highlight MatchParen ctermbg=4

" Up and down are more logical with g: works intuitively on wrapped lines
nnoremap <silent> k gk
nnoremap <silent> j gj
inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja
imap fd <Esc>

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>
" Space will toggle folds!
nnoremap <space> za
" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure
" Enable line numbers
set number
" Enable syntax highlighting
syntax on
" Highlight current line
set cursorline
" Make tabs as wide as two spaces
set tabstop=2
" Make indents two spaces
set shiftwidth=2
" Do indents instead of tabs
set smarttab
" But really just use spaces instead
set expandtab
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·
set list
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Disable  mouse in all modes
set mouse=
set ttymouse=
" Disable error bells
set noerrorbells
" And when I press Esc, please don't beep
set visualbell
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
" or don't.
" set title
" Show the (partial) command as it’s being typed
set showcmd
" Watch for file changes and don't write upon :next
set autoread
set noautowrite
" Use relative line numbers
if exists("&relativenumber")
  set relativenumber
  au BufReadPost * set relativenumber
endif
" Start scrolling five lines before the horizontal window border
set scrolloff=5
set sidescrolloff=5
" Auto indent, duh!
set autoindent
set shiftround
set copyindent
set preserveindent

set showmatch
" t - autowrap to textwidth
" c - autowrap comments to textwidth
" r - autoinsert comment leader with <Enter>
" q - allow formatting of comments with :gq
" l - don't format already long lines
set formatoptions=tcrql

" Strip trailing whitespace (,ss)
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
if has("autocmd")
  " Enable file type detection
  filetype plugin indent on
  " Treat .json files as .js
  autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
endif

set foldmethod=syntax
set foldlevel=20

" ====
" = Pathogen!
" ====
if filereadable(expand("~/.vim/autoload/pathogen.vim"))
  runtime! autoload/pathogen.vim
  if exists("g:loaded_pathogen")
    execute pathogen#infect()
    " ====
    " = Powerline plugin
    " ====
    " python from powerline.vim import setup as powerline_setup
    " python powerline_setup()
    " python del powerline_setup
    " ====
    " = Coq key bindings
    " ====
    au FileType coq call coquille#FNMapping()
  endif
endif

